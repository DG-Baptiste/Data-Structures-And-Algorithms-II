#include <iostream>
#include <vector>

const unsigned long long MOD = 1000003;

class Nth {
public:
    unsigned long long fibnthvalue(unsigned long long n);
    void To_The_Power(std::vector<std::vector<unsigned long long>>& F, unsigned long long n);
    void Multiplication(std::vector<std::vector<unsigned long long>>& M,
                        const std::vector<std::vector<unsigned long long>>& F);

private:
    void InitializeMatrix(std::vector<std::vector<unsigned long long>>& matrix);
};

void Nth::InitializeMatrix(std::vector<std::vector<unsigned long long>>& matrix) {
    matrix = {{1, 1}, {1, 0}};
}

void Nth::Multiplication(std::vector<std::vector<unsigned long long>>& M,
                         const std::vector<std::vector<unsigned long long>>& F) {
    std::vector<std::vector<unsigned long long>> result(2, std::vector<unsigned long long>(2, 0));

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 2; k++) {
                result[i][j] = (result[i][j] + (F[i][k] * M[k][j]) % MOD) % MOD;
            }
        }
    }

    M = result;
}

void Nth::To_The_Power(std::vector<std::vector<unsigned long long>>& F, unsigned long long n) {
    if (n == 0 || n == 1) {
        return;
    }

    std::vector<std::vector<unsigned long long>> temp;
    InitializeMatrix(temp);

    To_The_Power(F, n / 2);
    Multiplication(F, F);

    if (n % 2 != 0) {
        Multiplication(F, temp);
    }
}

unsigned long long Nth::fibnthvalue(unsigned long long n) {
    if (n == 0) {
        return 0;
    } else if (n == 1) {
        return 1;
    }

    std::vector<std::vector<unsigned long long>> matrix = {{1, 1}, {1, 0}};
    To_The_Power(matrix, n - 1);
    return matrix[0][0];
}

int main() {
    unsigned long long n;
    std::cin >> n;
    Nth fib;
    std::cout << fib.fibnthvalue(n - 1) << std::endl;
    return 0;
}
