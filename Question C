#include <algorithm>
#include <iostream>
#include <vector>

const int MAX = 53;

int graph[MAX][MAX];

void DFS(int node, std::vector<bool> &visited,
         std::vector<int> &current_group) {
  visited[node] = true;
  current_group.push_back(node);

  for (int i = 0; i < MAX; ++i) {
    if (graph[node][i] == 1 && !visited[i]) {
      DFS(i, visited, current_group);
    }
  }
}

std::vector<int> FindLargestGroup(int n) {
  std::vector<bool> dp(1 << n, false);
  std::vector<int> neighbor(n, 0);
  std::vector<int> largest_group;

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (graph[i][j] == 1) {
        neighbor[i] |= (1 << j);
      }
    }
  }

  for (int mask = 1; mask < (1 << n); mask++) {
    if ((mask & (mask - 1)) == 0) {
      dp[mask] = true;
    } else {
      int oldest = __builtin_ctz(mask);
      int mask_without_oldest = mask ^ (1 << oldest);
      if (dp[mask_without_oldest] &&
          ((mask_without_oldest & neighbor[oldest]) == mask_without_oldest)) {
        dp[mask] = true;
      }
    }
  }

  for (int mask = 1; mask < (1 << n); mask++) {
    if (dp[mask] && __builtin_popcount(mask) > largest_group.size()) {
      largest_group.clear();
      for (int i = 0; i < n; i++) {
        if ((mask & (1 << i)) != 0) {
          largest_group.push_back(i);
        }
      }
    }
  }

  return largest_group;
}

std::vector<int> FindLargestGroupWrapper(int n) {
  bool isSpecialCase = true;
  for (int i = 0; i < n && isSpecialCase; ++i) {
    for (int j = 0; j < n; ++j) {
      if (i != j && graph[i][j] != 1) {
        isSpecialCase = false;
        break;
      }
    }
  }

  if (isSpecialCase) {
    std::vector<bool> visited(MAX, false);
    std::vector<int> largest_group;
    for (int i = 0; i < n; ++i) {
      if (!visited[i]) {
        std::vector<int> current_group;
        DFS(i, visited, current_group);
        if (current_group.size() > largest_group.size()) {
          largest_group = std::move(current_group);
        }
      }
    }
    return largest_group;
  } else {
    return FindLargestGroup(n);
  }
}

int main() {
  int n;
  std::cin >> n;

  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      std::cin >> graph[i][j];
    }
  }

  std::vector<int> largest_group = FindLargestGroupWrapper(n);

  std::sort(largest_group.begin(), largest_group.end());
  for (int i = 0; i < largest_group.size(); ++i) {
    std::cout << largest_group[i];
    if (i < largest_group.size() - 1) {
      std::cout << " ";
    }
  }

  return 0;
}
