#include <iostream>
#include <vector>
#include <cstdint>

const uint64_t MOD = 1000003;

template <typename T>
class Nth {
public:
    T fibnthvalue(T n);
    void To_The_Power(std::vector<std::vector<T>>& F, T n);
    void Multiplication(std::vector<std::vector<T>>& M, const std::vector<std::vector<T>>& F);
    std::vector<std::vector<T>> matrix = {{1, 1, 1, 1, 1},
                                          {1, 0, 0, 0, 0},
                                          {0, 1, 0, 0, 0},
                                          {0, 0, 1, 0, 0},
                                          {0, 0, 0, 1, 0}};
};

template <typename T>
void Nth<T>::Multiplication(std::vector<std::vector<T>>& M, const std::vector<std::vector<T>>& F) {
    std::vector<std::vector<T>> result(5, std::vector<T>(5, 0));

    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            T sum = 0;
            for (int k = 0; k < 5; k++) {
                sum = (sum + (M[i][k] % MOD) * (F[k][j] % MOD)) % MOD;
            }
            result[i][j] = sum;
        }
    }

    M = result;
}

template <typename T>
void Nth<T>::To_The_Power(std::vector<std::vector<T>>& matrix, T n) {
    if (n == 0 || n == 1) {
        return;
    }

    std::vector<std::vector<T>> temp = {{1, 1, 1, 1, 1},
                                       {1, 0, 0, 0, 0},
                                       {0, 1, 0, 0, 0},
                                       {0, 0, 1, 0, 0},
                                       {0, 0, 0, 1, 0}};

    To_The_Power(matrix, n / 2);
    Multiplication(matrix, matrix);

    if (n % 2 != 0) {
        Multiplication(matrix, temp);
    }
}

template <typename T>
T Nth<T>::fibnthvalue(T n) {
    if (n == 0) {
        return 0;
    } else if (n == 1 || n == 2) {
        return 1;
    } else if (n == 3) {
        return 2;
    } else if (n == 4) {
        return 4;
    } else if (n == 5) {
        return 8;
    }
    To_The_Power(matrix, n - 5);
    std::vector<T> tran = {8, 4, 2, 1, 1};
    std::vector<T> result(5, 0);

    for (int i = 0; i < 5; i++) {
        T sum = 0;
        for (int j = 0; j < 5; j++) {
            sum = (sum + (matrix[i][j] % MOD) * (tran[j] % MOD)) % MOD;
        }
        result[i] = sum;
    }
    return result[0];
}

int main() {
    uint64_t n;
    std::cin >> n;
    Nth<uint64_t> fib;
    std::cout << fib.fibnthvalue(n) << std::endl;
    return 0;
}
