#include <iostream>
#include <vector>

std::vector<std::vector<int>> FindReachableNodes(
    const std::vector<std::vector<int>>& adjacency) {
  int num_nodes = adjacency.size();
  std::vector<std::vector<int>> reachable_nodes = adjacency;

  bool has_updates = true;
  while (has_updates) {
    has_updates = false;

    for (int intermediate_node = 0; intermediate_node < num_nodes;
         ++intermediate_node) {
      for (int source_node = 0; source_node < num_nodes; ++source_node) {
        if (reachable_nodes[source_node][intermediate_node] == 1) {
          for (int destination_node = 0; destination_node < num_nodes;
               ++destination_node) {
            if (reachable_nodes[intermediate_node][destination_node] == 1 &&
                reachable_nodes[source_node][destination_node] == 0) {
              reachable_nodes[source_node][destination_node] = 1;
              has_updates = true;
            }
          }
        }
      }
    }
  }

  return reachable_nodes;
}

int main() {
  int num_nodes;
  std::cin >> num_nodes;

  std::vector<std::vector<int>> adjacency_matrix(num_nodes,
                                                 std::vector<int>(num_nodes));

  for (int i = 0; i < num_nodes; i++) {
    std::string row;
    std::cin >> row;
    for (int j = 0; j < num_nodes; j++) {
      adjacency_matrix[i][j] = row[j] - '0';
    }
  }

  std::vector<std::vector<int>> reachable_nodes =
      FindReachableNodes(adjacency_matrix);

  for (int i = 0; i < num_nodes; i++) {
    for (int j = 0; j < num_nodes; j++) {
      std::cout << reachable_nodes[i][j];
    }
    std::cout << std::endl;
  }

  return 0;
}
