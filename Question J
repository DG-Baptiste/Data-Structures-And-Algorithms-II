#include <iostream>
#include <vector>

const int BITS_PER_INT = 32;

class CustomBitset {
 public:
  explicit CustomBitset(int size)
      : size(size), bits((size + BITS_PER_INT - 1) / BITS_PER_INT, 0) {}

  void set(int pos) {
    bits[pos / BITS_PER_INT] |= (1u << (pos % BITS_PER_INT));
  }

  bool test(int pos) const {
    return (bits[pos / BITS_PER_INT] & (1u << (pos % BITS_PER_INT))) != 0;
  }

  void operator|=(const CustomBitset& other) {
    for (int i = 0; i < bits.size(); ++i) {
      bits[i] |= other.bits[i];
    }
  }

  friend std::ostream& operator<<(std::ostream& os,
                                  const CustomBitset& bitset) {
    for (int i = 0; i < bitset.size; ++i) {
      os << bitset.test(i);
    }
    return os;
  }

 private:
  int size;
  std::vector<unsigned int> bits;
};

class TransitiveClosure {
 public:
  explicit TransitiveClosure(const std::vector<CustomBitset>& adjacency_matrix)
      : num_vertices(adjacency_matrix.size()), paths(adjacency_matrix) {}

  void ComputeClosure() {
    for (int alpha = 0; alpha < num_vertices; alpha++) {
      for (int beta = 0; beta < num_vertices; beta++) {
        if (paths[beta].test(alpha)) {
          paths[beta] |= paths[alpha];
        }
      }
    }
  }

  void DisplayPaths() const {
    for (int i = 0; i < num_vertices; i++) {
      std::cout << paths[i] << std::endl;
    }
  }

 private:
  int num_vertices;
  std::vector<CustomBitset> paths;
};

int main() {
  int num_vertices;
  std::cin >> num_vertices;

  std::vector<CustomBitset> adjacency_matrix(num_vertices,
                                             CustomBitset(num_vertices));

  for (int i = 0; i < num_vertices; i++) {
    std::string row;
    std::cin >> row;
    for (int j = 0; j < num_vertices; j++) {
      if (row[j] == '1') {
        adjacency_matrix[i].set(j);
      }
    }
  }

  TransitiveClosure closure(adjacency_matrix);
  closure.ComputeClosure();
  closure.DisplayPaths();

  return 0;
}
